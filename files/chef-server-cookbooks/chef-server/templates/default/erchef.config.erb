%% -*- mode: erlang -*-
%% -*- tab-width: 4;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 ft=erlang et
[
 %% SASL config
 {sasl, [
         {sasl_error_logger, {file, "<%= File.join(@log_directory, 'sasl-error.log') %>"}},
         {errlog_type, error},
         {error_logger_mf_dir, "<%= File.join(@log_directory, 'sasl') %>"},      % Log directory
         {error_logger_mf_maxbytes, 104857600},   % 10 MB max file size
         {error_logger_mf_maxfiles, 5}           % 5 files max
        ]},
 {lager, [
          {handlers, [
              {lager_console_backend, [info, {lager_default_formatter, ["[", severity, "] ", message, "\n"]}]},
              {lager_file_backend, [
                                    {file, "<%= File.join(@log_directory, 'erchef.log') %>"},
                                    {level, info},
                                    {size, <%= @log_rotation['file_maxbytes'] %>},
                                    {date, "$D0"},
                                    {count, <%= @log_rotation['num_to_keep'] %>},
                                    {formatter_config, [date, " ", time, " [", severity, "] ", message, "\n"]}
                                   ]}
              ]},

          %% Whether to write a crash log, and where.
          %% Commented/omitted/undefined means no crash logger.
          {crash_log, "<%= File.join(@log_directory, 'crash.log') %>"},

          %% Maximum size in bytes of events in the crash log - defaults to 65536
          {crash_log_msg_size, 65536},

          %% Maximum size of the crash log in bytes, before its rotated, set
          %% to 0 to disable rotation - default is 0
          {crash_log_size, <%= @log_rotation['file_maxbytes'] %>},

          %% What time to rotate the crash log - default is no time
          %% rotation. See the lager README for a description of this format:
          %% https://github.com/basho/lager/blob/master/README.org
          {crash_log_date, "$D0"},

          %% Number of rotated crash logs to keep, 0 means keep only the
          %% current one - default is 0
          {crash_log_count, <%= @log_rotation['num_to_keep'] %>},

          %% Whether to redirect error_logger messages into lager - defaults to true
          {error_logger_redirect, true},

          %% Bump up the "high-water mark" (default 50), which is the
          %% number of messages per second allowed to come from
          %% error_logger.
          {error_logger_hwm, 1000}
        ]},
{chef_wm, [
              {api_version, "<%= node['chef_server']['api_version'] %>"},
              {server_flavor, "<%= node['chef_server']['flavor'] %>"},
              {health_ping_modules, [chef_sql, chef_solr]},
              {health_ping_timeout, 400},
              {max_request_size, <%= node['chef_server']['erchef']['max_request_size'] %>},
              {local_key_gen, {true, 2048}},
              {ip, "<%= @listen %>"},
              {port, <%= @port %>},
              {reqid_header_name, "X-Request-Id"},
              {auth_skew, <%= @auth_skew %>},
              %% currently only used by the search endpoint to bound
              %% how many nodes are deserialized at a time in
              %% preparing a response.
              {bulk_fetch_batch_size, <%= @bulk_fetch_batch_size %>},
              %% By default, generate resource urls based upon Host header in requests. This does not
              %% include presigned urls from bookshelf or S3. You can override this with a fully-qualified URL,
              %% for example: "https://chef-server.example.com"
              {base_resource_url, <%= @helper.erl_atom_or_string(node['chef_server']['erchef']['base_resource_url']) %>},

              {superusers, [<<"chef-webui">>]},
              %% metrics config
              {root_metric_key, "<%= @root_metric_key %>"}
             ]},
  {chef_authn, [
                {keyring, [{default, "/etc/chef-server/chef-webui.pem"}]}
               ]},
  {chef_db, [
             {bulk_fetch_batch_size, <%= @bulk_fetch_batch_size %>},
             {cache_defaults, [{max_size, <%= @max_cache_size %> },
                                  {ttl, <%= @cache_ttl %> }]},
             {couchdb_host, "127.0.0.1"},
             {couchdb_port, 6666 }
            ]},
  {chef_index, [
                {rabbitmq_host, "<%= node['chef_server']['rabbitmq']['vip'] %>"},
                {rabbitmq_port, <%= node['chef_server']['rabbitmq']['node_port'] %> },
                {rabbitmq_user, <<"<%= node['chef_server']['rabbitmq']['user'] %>">>},
                {rabbitmq_password, <<"<%= node['chef_server']['rabbitmq']['password'] %>">>},
                {rabbitmq_vhost, <<"<%= node['chef_server']['rabbitmq']['vhost'] %>">>},
                {rabbitmq_exchange, <<"">>},
                {solr_url, "http://<%= node['chef_server']['chef-solr']['vip'] %>:<%= node['chef_server']['chef-solr']['port'] %>/solr"}
               ]},
  {chef_objects, [
                  {s3_access_key_id, "<%= node['chef_server']['bookshelf']['access_key_id'] %>"},
                  {s3_secret_key_id, "<%= node['chef_server']['bookshelf']['secret_access_key'] %>"},
                  %% The s3_url is used by erchef to talk to bookshelf. This is not used
                  %% to generate URLs given back to requestors. See s3_external_url for that setting
                  {s3_url, "<%= node['chef_server']['bookshelf']['url'] %>"},
                  {s3_platform_bucket_name, "<%= @s3_bucket %>"},

                  %% In order to support use-cases where erchef and bookshelf
                  %% sits behind a proxy or a firewall, we need an "external_url". This is
                  %% used to generate the artifact URL given back to the clients. However,
                  %% it makes sense for erchef to communicate with bookshelf internally.
                  %% Default is host_header, which will use the Host: header in the request
                  %% to generate presigned URLs.
                  %% To use S3, you would set the s3_url and s3_external_url to the same
                  %% url.
                  {s3_external_url, <%= @helper.erl_atom_or_string(node['chef_server']['bookshelf']['external_url']) %>},
                  {s3_url_ttl, <%= @s3_url_ttl %>},
                  {s3_parallel_ops_timeout, <%= @s3_parallel_ops_timeout %>},
                  {s3_parallel_ops_fanout, <%= @s3_parallel_ops_fanout %>}
                 ]},
  {stats_hero, [
               {udp_socket_pool_size, 1 },
               {estatsd_host, "<%= node['chef_server']['estatsd']['vip'] %>" },
               {estatsd_port, <%= node['chef_server']['estatsd']['port'] %> }
              ]},
  {sqerl, [
           %% The only database supported is Postgres
           {db_driver_mod, sqerl_pgsql_client},

           %% Database connection parameters
           {db_host, "<%= node['chef_server']['postgresql']['vip'] %>"},
           {db_port, <%= node['chef_server']['postgresql']['port'] %>},
           {db_user, "<%= node['chef_server']['postgresql']['sql_user'] %>"},
           {db_pass, "<%= node['chef_server']['postgresql']['sql_password'] %>"},
           {db_name, "opscode_chef" },
           {idle_check, 10000},

           {prepared_statements, {chef_sql, statements, []}},
           {column_transforms,
                              [{<<"created_at">>,
                                {sqerl_transformers, convert_YMDHMS_tuple_to_datetime}},
                               {<<"updated_at">>,
                                {sqerl_transformers, convert_YMDHMS_tuple_to_datetime}}]
           }
          ]},
  {pooler, [
           {pools, [[{name, sqerl},
                     {max_count, <%= @db_pool_size %>},
                     {init_count, <%= @db_pool_size %>},
                     {start_mfa, {sqerl_client, start_link, []}} ],
                    [{name, chef_depsolver},
                     {max_count, <%= @depsolver_worker_count %>},
                     {init_count, <%= @depsolver_worker_count %>},
                     {start_mfa, {chef_depsolver_worker, start_link, []}}]
                 ]},
           {metrics_module, folsom_metrics}
          ]},
  {webmachine, [
          {log_handlers, [
               {oc_wm_request_logger, [
                       {file, "<%= File.join(@log_directory, 'requests.log') %>"},
                       {file_size, 100},  %% Size in MB
                       {files, 5},
                       {annotations, [user, req_id, msg, perf_stats]}
                          ]
                      }]
              } ]
      },
  {ibrowse, [
             {default_max_sessions, <%= @ibrowse_max_sessions %>},
             {default_max_pipeline_size, <%= @ibrowse_max_pipeline_size %>}
            ]}
].
